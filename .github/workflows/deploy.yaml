name: Build and deploy

on: push

permissions:
  contents: read
  id-token: write

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node_modules
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v5
        if: steps.node_modules.outputs.cache-hit != 'true'
        with:
          node-version: "lts/*"
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"

      - run: npm ci --ignore-scripts
        if: steps.node_modules.outputs.cache-hit != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

  build:
    needs: [install]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache .next/cache
        uses: actions/cache@v4
        with:
          path: ./.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - run: npm run build
      # Bygg docker image
      - name: docker-build-push
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: teamdagpenger
          tag: ${{ github.sha }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

      - name: Cache static files
        uses: actions/cache@v4
        with:
          path: ./.next/static
          key: ${{ github.sha }}

    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  upload-cdn:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v4
        id: restore-build
        with:
          path: ./.next/static
          key: ${{ github.sha }}

      - name: Upload static files
        uses: nais/deploy/actions/cdn-upload/v2@master
        with:
          team: teamdagpenger
          source: ./.next/static
          destination: "/dp-produktside-frontend/_next"
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

  deploy-dev:
    needs: [build, upload-cdn]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/dev-gcp/vars.yaml
          VAR: image=${{ needs.build.outputs.image }}
          PRINT_PAYLOAD: true

  deploy-prod:
    needs: [build, upload-cdn]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/prod-gcp/vars.yaml
          VAR: image=${{ needs.build.outputs.image }}
          PRINT_PAYLOAD: true
